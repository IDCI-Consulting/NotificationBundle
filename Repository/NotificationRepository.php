<?php

/**
 * 
 * @author:  Gabriel BONDAZ <gabriel.bondaz@idci-consulting.fr>
 * @author:  Sekou KO√èTA <sekou.koita@supinfo.com>
 * @license: GPL
 *
 */

namespace IDCI\Bundle\NotificationBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * NotificationRepository 
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationRepository extends EntityRepository
{
    /**
     * Get Notifications by status query builder
     *
     * @param string $status
     * @return QueryBuilder
     */
    public function getNotificationsByStatusQueryBuilder($status)
    {
        $qb = $this
            ->createQueryBuilder("n")
            ->where('n.status = :status')
            ->setParameter('status', $status)
        ;

        return $qb;
    }

    /**
     * Get Notifications by status query
     *
     * @param string $status
     * @return Query
     */
    public function getNotificationsByStatusQuery($status)
    {
        $qb = $this->getNotificationsByStatusQueryBuilder($status);

        return is_null($qb) ? $qb : $qb->getQuery();
    }

    /**
     * Get Notifications by status
     *
     * @param string $status
     * @return array
     */
    public function getNotificationsByStatus($status)
    {
        $q = $this->getNotificationsByStatusQuery($status);

        return is_null($q) ? array() : $q->getResult();
    }

    /**
     * Get Notifications by type query builder
     *
     * @param string $type
     * @return Notification
     */
    public function getNotificationsByTypeQueryBuilder($type)
    {
        $qb = $this
            ->createQueryBuilder("n")
            ->where('n.type = :type')
            ->setParameter('type', $type)
        ;

        return $qb;
    }

    /**
     * Get Notifications by type query
     *
     * @param string $type
     * @return Notification
     */
    public function getNotificationsByTypeQuery($type)
    {
        $qb = $this->getNotificationsByTypeQueryBuilder($type);

        return is_null($qb) ? $qb : $qb->getQuery();
    }

    /**
     * Get Notifications by type
     *
     * @param string $type
     * @return Notification
     */
    public function getNotificationsByType($type)
    {
        $q = $this->getNotificationsByTypeQuery($type);

        return is_null($q) ? array() : $q->getResult();
        ;

    }

    /**
     * Get Notifications by source query builder
     *
     * @param string $source
     * @return Notification
     */
    public function getNotificationsBySourceQueryBuilder($source)
    {
        $qb = $this
            ->createQueryBuilder("n")
            ->where('n.source = :source')
            ->setParameter('source', $source)
        ;

        return $qb;
    }

    /**
     * Get Notifications by source query
     *
     * @param string $source
     * @return Notification
     */
    public function getNotificationsBySourceQuery($source)
    {
        $qb = $this->getNotificationsBySourceQueryBuilder($source);

        return is_null($qb) ? $qb : $qb->getQuery();
    }

    /**
     * Get Notifications by source
     *
     * @param string $source
     * @return Notification
     */
    public function getNotificationsBySource($source)
    {
        $q = $this->getNotificationsBySourceQuery($source);

        return is_null($q) ? array() : $q->getResult();
    }

    /**
     * Get Notifications between two dates query builder
     */
    public function getNotificationsBetweenTwoDatesQueryBuilder()
    {
        //TODO
    }

    /**
     * Get Notifications between two dates query
     */
    public function getNotificationsBetweenTwoDatesQuery()
    {
        //TODO
    }

    /**
     * Get Notifications between two dates
     */
    public function getNotificationsBetweenTwoDates()
    {
        //TODO
    }

    /**
     * Get Notifications between two updated_at dates query builder
     */
    public function getNotificationsBetweenTwoUpdatedAtDatesQueryBuilder()
    {
        //TODO
    }

    /**
     * Get Notifications between two updated_at dates query
     */
    public function getNotificationsBetweenTwoUpdatedAtDatesQuery()
    {
        //TODO
    }

    /**
     * Get Notifications between two updated_at dates
     */
    public function getNotificationsBetweenTwoUpdatedAtDates()
    {
        //TODO
    }

}
